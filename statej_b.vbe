-- VHDL data flow description generated from `statej_b`
--		date : Sun Apr 15 20:19:51 2018


-- Entity Declaration

ENTITY statej_b IS
  PORT (
  ck : in BIT;	-- ck
  vss : in BIT;	-- vss
  vdd : in BIT;	-- vdd
  i : in bit_vector(2 DOWNTO 0) ;	-- i
  chng : out bit_vector(1 DOWNTO 0) ;	-- chng
  reset : in BIT;	-- reset
  o : out bit_vector(1 DOWNTO 0) 	-- o
  );
END statej_b;


-- Architecture Declaration

ARCHITECTURE behaviour_data_flow OF statej_b IS
  SIGNAL sdet_cs : REG_VECTOR(2 DOWNTO 0) REGISTER;	-- sdet_cs
  SIGNAL aux0 : BIT;		-- aux0
  SIGNAL aux1 : BIT;		-- aux1
  SIGNAL aux3 : BIT;		-- aux3
  SIGNAL aux4 : BIT;		-- aux4
  SIGNAL aux5 : BIT;		-- aux5
  SIGNAL aux6 : BIT;		-- aux6
  SIGNAL aux7 : BIT;		-- aux7
  SIGNAL aux9 : BIT;		-- aux9
  SIGNAL aux12 : BIT;		-- aux12
  SIGNAL aux13 : BIT;		-- aux13

BEGIN
  aux13 <= (NOT(i(2)) AND NOT(sdet_cs(0)));
  aux12 <= (NOT(sdet_cs(2)) AND (NOT(i(2)) AND (sdet_cs(0) 
AND sdet_cs(1))));
  aux9 <= (sdet_cs(0) AND (NOT(sdet_cs(1)) AND NOT(reset)));
  aux7 <= (NOT(i(1)) AND sdet_cs(2));
  aux6 <= (NOT(i(0)) AND i(1));
  aux5 <= NOT(NOT(i(0)) AND NOT(sdet_cs(2)));
  aux4 <= (i(0) XOR i(1));
  aux3 <= ((i(0) AND i(1)) AND NOT(i(2)));
  aux1 <= (aux0 AND i(2));
  aux0 <= (NOT(i(0)) AND NOT(i(1)));
  label0 : BLOCK ((ck AND NOT((ck'STABLE))) = '1')
  BEGIN
    sdet_cs (0) <= GUARDED ((NOT(i(0) XOR aux7) AND aux13) OR (aux4 AND 
aux12) OR ((((aux1 OR aux3) AND sdet_cs(0)) OR (NOT(
i(1)) AND aux13)) AND NOT(sdet_cs(1))) OR reset);
  END BLOCK label0;
  label1 : BLOCK ((ck AND NOT((ck'STABLE))) = '1')
  BEGIN
    sdet_cs (1) <= GUARDED (((aux1 OR (i(0) AND (i(1) OR sdet_cs(2)) AND NOT
(i(2)))) AND sdet_cs(0) AND NOT(sdet_cs(1))) OR (
NOT(i(0)) AND (NOT(i(1)) OR sdet_cs(2)) AND aux13) 
OR (aux7 AND NOT(i(2))) OR reset);
  END BLOCK label1;
  label2 : BLOCK ((ck AND NOT((ck'STABLE))) = '1')
  BEGIN
    sdet_cs (2) <= GUARDED ((((aux0 AND NOT(i(2))) OR NOT(sdet_cs(1))) AND (
aux1 OR (aux5 AND NOT(aux4) AND NOT(i(2)))) AND 
sdet_cs(0)) OR reset);
  END BLOCK label2;

o (0) <= (aux1 AND aux9);

o (1) <= (aux3 AND aux9);

chng (0) <= ((NOT(aux5) OR NOT(sdet_cs(1))) AND aux4 AND NOT(
i(2)) AND NOT(sdet_cs(0)) AND NOT(reset));

chng (1) <= (((aux6 AND aux12) OR (aux6 AND NOT(i(2)) AND NOT
(sdet_cs(0)) AND NOT(sdet_cs(1)))) AND NOT(reset));
END;
